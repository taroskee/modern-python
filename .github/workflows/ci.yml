name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  UV_SYSTEM_PYTHON: 1

permissions:
  contents: read
  packages: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Setup Node.js for Pyright
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        uv pip install ruff
        npm install -g pyright
        # Install common libraries for type checking
        if [ -f requirements-common.txt ]; then
          uv pip install -r requirements-common.txt
        fi
    
    - name: Run Ruff linter
      run: ruff check . --output-format=github
    
    - name: Run Ruff formatter
      run: ruff format --check --diff .
    
    - name: Run Pyright type checker
      run: pyright src || echo "Type checking completed with warnings"

  test:
    name: Test Python
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          ~/AppData/Local/uv/cache
        key: ${{ runner.os }}-py313-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-py313-uv-
    
    - name: Install dependencies
      run: |
        uv pip install pytest pytest-cov
        uv pip install -e .
        # Install common libraries for testing
        if [ -f requirements-common.txt ]; then
          uv pip install -r requirements-common.txt
        fi
    
    - name: Run tests with coverage
      run: |
        pytest tests -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv pip install bandit[toml] safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r src -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          # Check if there are any HIGH or MEDIUM severity issues
          high_medium_count=$(cat bandit-report.json | jq '[.results[] | select(.issue_severity=="HIGH" or .issue_severity=="MEDIUM")] | length')
          if [ "$high_medium_count" -gt 0 ]; then
            echo "Found $high_medium_count HIGH/MEDIUM severity issues"
            cat bandit-report.json | jq '.results[] | select(.issue_severity=="HIGH" or .issue_severity=="MEDIUM")'
            exit 1
          else
            echo "No HIGH/MEDIUM severity issues found"
          fi
        fi
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json
    
    - name: Check for known vulnerabilities
      run: |
        safety check --json || echo "Vulnerabilities found - review required"

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [lint, test]
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install build dependencies
      run: |
        uv pip install build wheel twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

