name: CD

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: "3.13"

jobs:
  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'push'
    environment:
      name: pypi
      url: https://pypi.org/project/modern-python/
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv pip install build wheel twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to Test PyPI
      if: github.event_name == 'push'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
    
    - name: Publish to PyPI
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  deploy-docker:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: [deploy-pypi]
    if: github.event_name == 'release' || github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/modern-python
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: .devcontainer/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Update Docker Hub description
      if: github.event_name == 'release'
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ secrets.DOCKER_USERNAME }}/modern-python
        readme-filepath: ./README.md

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv pip install -e ".[docs]"
    
    - name: Build documentation
      run: |
        cd docs
        make clean
        make html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        force_orphan: true

  deploy-server:
    name: Deploy to Server
    runs-on: self-hosted
    needs: [deploy-docker]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.APP_URL }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set environment variables
      run: |
        echo "ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_ENV
        echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
    
    - name: Pull latest Docker image
      run: |
        docker pull ghcr.io/${{ github.repository }}:${{ env.VERSION }}
    
    - name: Stop existing container
      run: |
        docker stop modern-python-${{ env.ENVIRONMENT }} || true
        docker rm modern-python-${{ env.ENVIRONMENT }} || true
    
    - name: Start new container
      run: |
        docker run -d \
          --name modern-python-${{ env.ENVIRONMENT }} \
          --restart unless-stopped \
          -p ${{ vars.APP_PORT }}:8000 \
          -e ENVIRONMENT=${{ env.ENVIRONMENT }} \
          -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
          -e API_KEY=${{ secrets.API_KEY }} \
          -v /opt/modern-python/data:/app/data \
          ghcr.io/${{ github.repository }}:${{ env.VERSION }}
    
    - name: Health check
      run: |
        sleep 10
        curl -f http://localhost:${{ vars.APP_PORT }}/health || exit 1
    
    - name: Run database migrations
      if: env.ENVIRONMENT == 'production'
      run: |
        docker exec modern-python-${{ env.ENVIRONMENT }} \
          python -m src.database.migrate
    
    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to ${{ env.ENVIRONMENT }} ${{ job.status }}
          Version: ${{ env.VERSION }}
          Actor: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  create-release-notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      uses: orhun/git-cliff-action@v3
      with:
        config: .github/cliff.toml
        args: --latest --strip header
      env:
        OUTPUT: CHANGELOG.md
    
    - name: Update release notes
      uses: softprops/action-gh-release@v1
      with:
        body_path: CHANGELOG.md
        append_body: true