[project]
name = "modern-python"
version = "0.1.0"
description = "Modern Python Development Environment with Docker and VSCode DevContainer"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    {name = "Modern Python Team", email = "team@example.com"},
]
keywords = ["python", "docker", "devcontainer", "development", "environment"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Build Tools",
    "Operating System :: OS Independent",
]

dependencies = [
    # Keep minimal - add project-specific dependencies as needed
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.5.0",
    "pyright>=1.1.370",
    "ipython>=8.18.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/modern-python"
Documentation = "https://modern-python.readthedocs.io"
Repository = "https://github.com/your-org/modern-python.git"
Issues = "https://github.com/your-org/modern-python/issues"
Changelog = "https://github.com/your-org/modern-python/blob/main/CHANGELOG.md"

[project.scripts]
modern-python = "src.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]
exclude = [
    "/.github",
    "/.vscode",
    "/.devcontainer",
    "/runner",
    "/scripts",
    "*.pyc",
    "__pycache__",
    ".pytest_cache",
    ".ruff_cache",
    ".mypy_cache",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.5.0",
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s - %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.pyright]
pythonVersion = "3.13"
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportMissingImports = false
reportPrivateUsage = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportUnknownParameterType = false
reportUnknownLambdaType = false
reportImportCycles = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportConstantRedefinition = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportAssertAlwaysTrue = true
useLibraryCodeForTypes = true
verboseOutput = false
include = ["src"]
exclude = ["tests", "**/__pycache__", ".venv", "venv", "build", "dist"]
venvPath = "."
venv = ".venv"

[tool.ruff]
target-version = "py313"
line-length = 88
indent-width = 4
fix = true
show-fixes = true
respect-gitignore = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 72

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "DTZ",  # flake8-datetimez
    "RUF",  # Ruff-specific rules
    "PTH",  # flake8-use-pathlib
    "N",    # pep8-naming
    "COM",  # flake8-commas
    "Q",    # flake8-quotes
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "RSE",  # flake8-raise
    "T20",  # flake8-print
    "PIE",  # flake8-pie
    "ISC",  # flake8-implicit-str-concat
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # perflint
    "LOG",  # flake8-logging
]

ignore = [
    "E501",   # line too long (handled by formatter)
    "E203",   # whitespace before ':'
    "E266",   # too many leading '#' for block comment
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PGH003",  # blanket-type-ignore
    "RUF012",  # mutable class attributes
    "TRY003",  # long messages in exception class
]

fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "T201", "T203", "PLR2004", "PLR0913"]
"__init__.py" = ["F401", "F403"]
"docs/conf.py" = ["ALL"]
"scripts/*" = ["T201", "T203"]

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-single-line = false
lines-after-imports = 2
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.field_validator"]

[tool.ruff.lint.pylint]
max-args = 6
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"